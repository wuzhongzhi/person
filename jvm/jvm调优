面试：
 1.什么情况下会发生栈内存溢出。vm在哪里设置栈的大小？设置的参数是什么
 栈用来存储线程的局部变量表、操作数栈、动态链接、方法出口等信息。如果请求栈的深度不足时抛出的错误会包含类似下面的信息： java.lang.StackOverflowError。 
 与栈相关的JVM参数有： -Xss: 每个线程的堆栈大小
 出现栈溢出可能原因：
 递归：递归里用到的局部变量存储在堆栈中，堆栈的访问效率高，速度快，但空间有限，递归太多变量需要一直入栈而不出栈，导致需要的内存空间大于堆栈的空间，栈空间是2M，堆空间内存空间。

 2.JVM中一次完整的GC流程是怎样的，对象如何晋升到老年代，说说你知道的几种主要的JVM参数。
 模拟方法，自己去体验
 Random random = new Random();
        String str ="showgc";
        while (true){
            str+=str+random.nextInt(999);
            str.intern();
        }
 
 3.你们线上应用的JVM参数有哪些。
 
 
一般经过「运维团队」给我们设置的JVM和机器上的参数，已经满足绝大多数的需求了。

最终手段：GC 发生问题不是一定要对 JVM 的 GC 参数进行调优，大部分情况下是通过 GC 的情况找出一些业务问题，切记上来就对 GC 参数进行调整，当然有明确配置错误的场景除外。出现问题时查FULL GC问题

1. 通过jps命令查看Java进程「基础」信息（进程号、主类）。这个命令很常用的就是用来看当前服务器有多少Java进程在运行，它们的进程号和加载主类是啥
2. 通过jstat命令查看Java进程「统计类」相关的信息（类加载、编译相关信息统计，各个内存区域GC概况和统计）。这个命令很常用于看GC的情况
3. 通过jinfo命令来查看和调整Java进程的「运行参数」。
4. 通过jmap命令来查看Java进程的「内存信息」。这个命令很常用于把JVM内存信息dump到文件，然后再用MAT( Memory Analyzer tool 内存解析工具)把文件进行分析
5. 通过jstack命令来查看JVM「线程信息」。这个命令用常用语排查死锁相关的问题


Trade Off：与 CAP 注定要缺一角一样，GC 优化要在延迟（Latency）、吞吐量（Throughput）、容量（Capacity）三者之间进行权衡。


控制变量：控制变量法是在蒙特卡洛（Monte Carlo）方法中用于减少方差的一种技术方法，我们调优的时候尽量也要使用，每次调优过程尽可能只调整一个变量。

善用搜索：理论上 99.99% 的 GC 问题基本都被遇到了，我们要学会使用搜索引擎的高级技巧，重点关注 StackOverFlow、Github 上的 Issue、
以及各种论坛博客，先看看其他人是怎么解决的，会让解决问题事半功倍。能看到这篇文章，你的搜索能力基本过关了~
GC 参数：如果堆、栈确实无法第一时间保留，一定要保留 GC 日志，这样我们最起码可以看到 GC Cause，有一个大概的排查方向。关于 GC 日志相关参数，
最基本的 -XX:+HeapDumpOnOutOfMemoryError 等一些参数就不再提了，笔者建议添加以下参数，可以提高我们分析问题的效率。

-Xmx：设置堆的最大值、-Xms：设置堆的初始值、-Xmn：表示年轻代的大小、-XX:SurvivorRatio：伊甸区和幸存区的比例等等
垃圾回收器（选择合适的垃圾回收器，以及各个垃圾回收器的各种调优参数）
比如（-XX:+UseG1GC：指定 JVM 使用的垃圾回收器为 G1、-XX:MaxGCPauseMillis：设置目标停顿时间、-XX:InitiatingHeapOccupancyPercent：当整个堆内存使用达到一定比例，全局并发标记阶段
就会被启动等等

![image][https://github.com/wuzhongzhi/person/blob/6462839a79f6cc6219aede1efc54b4c1e707377d/images/image.png]
